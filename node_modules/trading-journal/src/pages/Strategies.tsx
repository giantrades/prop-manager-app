import React, { useState, useMemo } from 'react';
import { useJournal } from "@apps/journal-state";
import { useCurrency } from "@apps/state";
import StrategyForm from '../Components/StrategyForm';
import { Strategy } from '../types/strategy';
import { Trade } from '../types/trade';
import { ResponsiveContainer, AreaChart, Area, XAxis, YAxis, Tooltip, CartesianGrid } from 'recharts';

const categoryColors = {
  Futures: 'pink',
  Forex: 'lavander',
  Cripto: 'orange',
  Personal: 'purple',
  Todos:'white',
  gray: 'gray'
};

const pillClass = {
  'Futures': 'pink',
  'Forex': 'lavander',
  'Cripto': 'orange',
  'Personal': 'purple',
  'Todos': 'white'
};

export const StrategyCard = ({ strategy, trades = [], onEdit, onDelete, currency, rate }) => {
  const linkedTrades = trades.filter(t => t.strategyId === strategy.id);

  const fmt = (v: number) => {
    const value = currency === 'USD' ? (v || 0) : (v || 0) * rate;
    const locale = currency === 'USD' ? 'en-US' : 'pt-BR';
    const curr = currency === 'USD' ? 'USD' : 'BRL';
    return new Intl.NumberFormat(locale, { style: 'currency', currency: curr }).format(value);
  };

  const stats = useMemo(() => {
    const totalPnLNet = linkedTrades.reduce((s, t) => s + (Number(t.result_net) || 0), 0);
    const totalR = linkedTrades.reduce((s, t) => s + (Number(t.result_R) || 0), 0);
    const validTrades = linkedTrades.filter(t => !t.isBreakeven);
    const wins = validTrades.filter(t => (Number(t.result_net) || 0) > 0).length;
    const breakevens = linkedTrades.filter(t => t.isBreakeven).length;
    const avgR = validTrades.length ? totalR / validTrades.length : 0;
    const winrate = validTrades.length ? Math.round((wins / validTrades.length) * 1000) / 10 : 0;

    return {
      linkedTradesCount: linkedTrades.length,
      totalPnLNet,
      avgR,
      winrate,
      breakevens
    };
  }, [JSON.stringify(linkedTrades)]);

  const equitySeries = useMemo(() => {
    let acc = 0;
    return linkedTrades
      .slice()
      .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime())
      .map(t => {
        acc += Number(t.result_net) || 0;
        return { date: new Date(t.date).toLocaleDateString(), equity: acc };
      });
  }, [JSON.stringify(linkedTrades)]);

  const tagsArray: string[] = Array.isArray(strategy.tags)
    ? strategy.tags
    : Object.keys(strategy.tags || {});

  const catColor = categoryColors[strategy.category] || categoryColors.gray;

  return (
    <div
      className="card strategy-card border-soft"
      style={{
        height: 320,
        display: 'flex',
        flexDirection: 'column',
        padding: 16,
        borderTop: `3px solid var(--${pillClass[strategy.category] || 'gray'})`,
        background: 'linear-gradient(180deg, rgba(12,18,28,0.8), rgba(6,8,12,0.8))'
      }}
    >
      {/* Cabe√ßalho */}
      <div style={{ display: 'flex', justifyContent: 'space-between' }}>
        <div>
          <h4 style={{ margin: 0 }}>{strategy.name}</h4>
          <div style={{ display: 'flex', gap: 8, marginTop: 8, flexWrap: 'wrap' }}>Mercado:
            <span className={`pill ${pillClass[strategy.category]}`}>{strategy.category}</span>

          </div>
        </div>
        <div style={{ display: 'flex', gap: 8 }}>
          <button className="btn ghost small" onClick={() => onEdit(strategy)}>Editar</button>
          <button className="btn ghost negative small" onClick={() => onDelete(strategy.id)}>Deletar</button>
        </div>
      </div>

      {/* Corpo */}
      <div style={{ display: 'flex', gap: 12, marginTop: 12, flex: 1 }}>
        {/* Bloco 1 - Stats */}
        <div style={{ flex: 1 }}>
          <div style={{ fontSize: 20, fontWeight: 700, color: stats.totalPnLNet >= 0 ? '#10B981' : '#F87171' }}>
            {fmt(stats.totalPnLNet)}
          </div>
          <div className="muted">P&L Total</div>
          <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 8, marginTop: 8 }}>
            <div>
              <div className="muted text-xs">Trades</div>
              <div>{stats.linkedTradesCount}</div>
            </div>
            <div>
              <div className="muted text-xs">Winrate</div>
              <div>{stats.winrate}%</div>
            </div>
            <div>
              <div className="muted text-xs">Avg R</div>
              <div>{stats.avgR.toFixed(2)} R</div>
            </div>
            <div>
              <div className="muted text-xs">Break-evens</div>
              <div>{stats.breakevens}</div>
            </div>
          </div>
        </div>

{/* Block 2 - descri√ß√£o + tags + alvo/stop (em coluna) */}
<div style={{ flex: 1, display:'flex', flexDirection:'column', gap:12 }}>
  <div>
    <div style={{ fontWeight:600 }} className="muted">Descri√ß√£o</div>
    <div style={{ marginTop:6, lineHeight:1.4 }}>{strategy.description || '‚Äî'}</div>
  </div>

  {/* tags abaixo da descri√ß√£o */}
  <div>
    <div className="muted text-xs" style={{ marginBottom: 6 }}>Tags</div>
    <div className="flex flex-wrap gap-2">
      { (Array.isArray(strategy.tags) ? strategy.tags : Object.keys(strategy.tags || {})).map((tag:string, i:number) => (
        <span key={i} className={`pill ${pillClass[strategy.category] || 'gray'}`}>
          {tag}
        </span>
      )) }
    </div>
  </div>

  {/* alvo / stop mais abaixo */}
  <div style={{ marginTop: 'auto' }}>
    <div className="muted text-xs">R:R</div>
    <div style={{ display:'flex', gap: 12, marginTop: 6, alignItems: 'center' }}>
      <div>
        <div className="muted text-xs">Alvo</div>
        <div style={{ fontWeight:700 }}>{strategy.defaultRisk?.profitTargetR ? `${strategy.defaultRisk.profitTargetR}R` : '‚Äî'}</div>
      </div>
      <div>
        <div className="muted text-xs">Stop</div>
        <div style={{ fontWeight:700 }}>{strategy.defaultRisk?.stopLossR ? `${strategy.defaultRisk.stopLossR}R` : '‚Äî'}</div>
      </div>
    </div>
  </div>
</div>


        {/* Bloco 3 - Gr√°fico */}
        <div style={{ flex: 1, minWidth: 220 }}>
          {equitySeries.length > 0 ? (
            <ResponsiveContainer width="100%" height="100%">
              <AreaChart data={equitySeries}>
                <defs>
                  <linearGradient id={`colorEq-${strategy.id}`} x1="0" y1="0" x2="0" y2="1">
                    <stop offset="5%" stopColor={catColor} stopOpacity={0.6}/>
                    <stop offset="95%" stopColor={catColor} stopOpacity={0.05}/>
                  </linearGradient>
                </defs>
                <CartesianGrid strokeDasharray="3 3" vertical={false}/>
                <XAxis dataKey="date" tick={{ fontSize: 11 }}/>
                <YAxis tickFormatter={(v) => fmt(v)} tick={{ fontSize: 11 }}/>
                <Tooltip formatter={(v) => fmt(Number(v))} contentStyle={{ background: '#0f1724', borderRadius: 8, color: '#fff' }}/>
                <Area type="monotone" dataKey="equity" stroke={catColor} fill={`url(#colorEq-${strategy.id})`} strokeWidth={2}/>
              </AreaChart>
            </ResponsiveContainer>
          ) : (
            <div className="muted" style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', height: '100%' }}>
              Sem dados
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

// --- P√°gina ---
export default function StrategiesPage() {
  const { strategies, trades, removeStrategy } = useJournal() as any;
  const { currency, rate } = useCurrency();
  const [open, setOpen] = useState(false);
  const [editingStrategy, setEditingStrategy] = useState<Strategy | null>(null);

  const handleEdit = (s: Strategy) => {
    setEditingStrategy(s);
    setOpen(true);
  };

  const handleDelete = (id: string) => {
    if (confirm('Tem certeza que deseja deletar esta estrat√©gia?')) {
      removeStrategy(id);
    }
  };

  return (
    <div className="p-6 space-y-6">
      <div className="flex items-center justify-between">
        <h2 className="text-2xl font-semibold">üìà Gerenciamento de Estrat√©gias</h2>
        <button className="btn" onClick={() => { setEditingStrategy(null); setOpen(true); }}>
          ‚ûï Nova Estrat√©gia
        </button>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {(strategies as Strategy[] || []).map((s) => (
          <StrategyCard
            key={s.id}
            strategy={s}
            trades={trades as Trade[] || []}
            onEdit={handleEdit}
            onDelete={handleDelete}
            currency={currency}
            rate={rate}
          />
        ))}
      </div>

      {(!strategies || strategies.length === 0) && (
        <div className="card p-6 text-center text-muted">
          Nenhuma estrat√©gia cadastrada.
        </div>
      )}

      {open && (
        <StrategyForm
          key={editingStrategy?.id || 'new'}
          editing={editingStrategy}
          onClose={() => { setOpen(false); setEditingStrategy(null); }}
        />
      )}
    </div>
  );
}
