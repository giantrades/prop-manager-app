import React, { useState, useEffect } from 'react';
import { useJournal } from "@apps/journal-state";
import { v4 as uuidv4 } from 'uuid';
import { Strategy, StrategyCategory, DefaultRiskSettings } from '../types/strategy';

const categories: StrategyCategory[] = ['Futures', 'Forex', 'Cripto', 'Personal', 'Todos'];

type Props = {
  onClose: () => void;
  editing?: Strategy | null;
};

const TagsBuilder: React.FC<{ tags: string[]; onChange: (list: string[]) => void }> = ({ tags, onChange }) => {
  const [newTag, setNewTag] = useState('');

  const handleAdd = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      const v = newTag.trim();
      if (v && !tags.includes(v)) {
        onChange([...tags, v]);
        setNewTag('');
      }
    }
  };

  const handleRemove = (idx: number) => onChange(tags.filter((_, i) => i !== idx));

  return (
    <div>
      <input
        className="input w-full"
        placeholder="Adicionar tag (Enter)"
        value={newTag}
        onChange={(e) => setNewTag(e.target.value)}
        onKeyDown={handleAdd}
      />
      <div className="flex flex-wrap gap-2 mt-2">
        {tags.map((tag, i) => (
          <span key={i} className="pill pink cursor-pointer" onClick={() => handleRemove(i)}>
            {tag} <span className="opacity-70">×</span>
          </span>
        ))}
      </div>
    </div>
  );
};

export default function StrategyForm({ onClose, editing }: Props) {
  const { saveStrategy } = useJournal();

  const initialTags: string[] = editing?.tags
    ? (Array.isArray(editing.tags) ? editing.tags : Object.keys(editing.tags))
    : [];

  const [form, setForm] = useState<Partial<Strategy>>({
    id: editing?.id || '',
    name: editing?.name || '',
    category: editing?.category as StrategyCategory | undefined,
    description: editing?.description || '',
    defaultRisk: editing?.defaultRisk || { profitTargetR: 0, stopLossR: 0 },
  });

  const [tags, setTags] = useState<string[]>(initialTags);

  const handleOverlayClick = (e: React.MouseEvent) => {
    if (e.target === e.currentTarget) onClose();
  };

  const handleSave = async () => {
    if (!form.name || !form.category) {
      alert('Nome e categoria obrigatórios');
      return;
    }

    const defaultRisk: DefaultRiskSettings = {
      profitTargetR: Number(form.defaultRisk?.profitTargetR) || 0,
      stopLossR: Number(form.defaultRisk?.stopLossR) || 0,
    };

    const finalForm: Strategy = {
      ...form,
      id: editing?.id || uuidv4(),
      tags: tags.reduce((acc, tag) => ({ ...acc, [tag]: true }), {}),
      defaultRisk,
      createdAt: editing?.createdAt || new Date().toISOString(),
      updatedAt: new Date().toISOString(),
    } as Strategy;

    await saveStrategy(finalForm);
    onClose();
  };

  return (
    <div className="modal-overlay" onClick={handleOverlayClick}>
      <div className="modal-content">
        <button className="modal-close" onClick={onClose}>×</button>

        <div className="sticky top-0 bg-panel p-6 border-b border-soft">
          <div className="flex items-center justify-between">
            <h2 className="text-xl font-semibold mb-4">
              {editing ? 'Editar Estratégia' : 'Nova Estratégia'}
            </h2>
            <div className="flex items-center gap-2">
              <button className="btn ghost" onClick={onClose}>Cancelar</button>
              <button className="btn" onClick={handleSave}>Salvar</button>
            </div>
          </div>
        </div>

        <div className="form-body p-6 space-y-6">
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="form-label">Nome</label>
              <input
                className="input"
                value={form.name || ''}
                onChange={(e) => setForm({ ...form, name: e.target.value })}
              />
            </div>
            <div>
              <label className="form-label">Categoria</label>
              <select
                className="input"
                value={form.category || ''}
                onChange={(e) => setForm({ ...form, category: e.target.value as StrategyCategory })}
              >
                <option value="">Selecione...</option>
                {categories.map((c) => <option key={c}>{c}</option>)}
              </select>
            </div>
          </div>

          <div>
            <label className="form-label">Tags</label>
            <TagsBuilder tags={tags} onChange={setTags} />
          </div>

          <div>
            <label className="form-label">Descrição</label>
            <textarea
              className="input h-24"
              value={form.description || ''}
              onChange={(e) => setForm({ ...form, description: e.target.value })}
            />
          </div>

          <div>
            <h4 className="text-sm text-muted font-semibold mb-2">Configurações Padrão R:R</h4>
            <div className="grid grid-cols-2 gap-3">
              <div>
                <label className="form-label">Alvo (R)</label>
                <input
                  type="number"
                  className="input"
                  step="0.1"
                  value={form.defaultRisk?.profitTargetR || ''}
                  onChange={(e) => setForm({ ...form, defaultRisk: { ...form.defaultRisk, profitTargetR: e.target.value as any } })}
                />
              </div>
              <div>
                <label className="form-label">Stop (R)</label>
                <input
                  type="number"
                  className="input"
                  step="0.1"
                  value={form.defaultRisk?.stopLossR || ''}
                  onChange={(e) => setForm({ ...form, defaultRisk: { ...form.defaultRisk, stopLossR: e.target.value as any } })}
                />
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
